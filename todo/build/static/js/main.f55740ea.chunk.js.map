{"version":3,"sources":["components/app-header/index.js","components/app-header/app-header.js","components/search-panel/index.js","components/search-panel/search-panel.js","components/post-status-filter/index.js","components/post-status-filter/post-status-filter.js","components/post-list-item/index.js","components/post-list-item/post-list-item.js","components/post-list/index.js","components/post-list/post-list.js","components/post-add-form/index.js","components/post-add-form/post-add-form.js","components/app/index.js","components/app/app.js","index.js"],"names":["AppHeader","_ref","liked","allPosts","React","createElement","className","SearchPanel","_Component","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","state","term","onUpdateSearch","bind","_assertThisInitialized","_inherits","_createClass","key","value","e","target","setState","type","placeholder","onChange","Component","PostStatusFilter","PostStatusFiler","buttons","name","label","_this2","map","_this2$props","filter","onFilterSelect","clazz","onClick","PostListItem","apply","arguments","_this$props","onDelete","onToggleImportant","onToggleLiked","onToggleDone","done","like","important","concat","PostList","posts","elements","item","id","itemProps","_objectWithoutProperties","Object","assign","PostAddForm","text","onValueChange","onSubmit","preventDefault","onAdd","App","data","deleteItem","addItem","maxId","index","findIndex","elem","_toConsumableArray","slice","body","newItem","_ref2","_ref3","oldItem","_objectSpread","_ref4","old","items","length","indexOf","_ref5","_this$state","visiblePosts","filterPosts","seachPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f55740ea.chunk.js","sourcesContent":["import AppHeader from \"./app-header\";\r\nexport default AppHeader;","import React from \"react\";\r\n\r\nimport \"./app-header.css\";\r\n\r\nconst AppHeader = ({liked, allPosts}) => {\r\n    return (\r\n        <div className=\"app-header d-flex\">\r\n            <h1>React App</h1>\r\n            <h2>{allPosts} postid, meeldisid neist {liked}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppHeader;","import SearchPanel from \"./search-panel\";\r\n\r\nexport default SearchPanel","import React, {Component} from \"react\";\r\n\r\nimport \"./search-panel.css\";\r\n\r\nexport default class SearchPanel extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: \"\"\r\n        };\r\n\r\n        this.onUpdateSearch = this.onUpdateSearch.bind(this);\r\n    }\r\n\r\n    onUpdateSearch(e) {\r\n        const term = e.target.value;\r\n        this.setState({term});\r\n        this.props.onUpdateSearch(term);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <input\r\n                type=\"text\"\r\n                className=\"form-control search-input\"\r\n                placeholder=\"Otsi posti\"\r\n                onChange={this.onUpdateSearch}\r\n            />\r\n        )\r\n    }\r\n}","import PostStatusFilter from \"./post-status-filter\";\r\n\r\nexport default PostStatusFilter;","import React, {Component} from \"react\";\r\n\r\nimport \"./post-status-filter.css\";\r\n\r\nexport default class PostStatusFiler extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.buttons = [\r\n            {name: \"all\", label: \"Kõik\"},\r\n            {name: \"like\", label: \"Meeldis\"},\r\n        ]\r\n    }\r\n\r\n    render() {\r\n        const buttons = this.buttons.map(({name, label}) => {\r\n            const {filter, onFilterSelect} = this.props;\r\n            const active = filter === name;\r\n            const clazz = \"btn\" + (active ? \" btn-info\" : \" btn-outline-secondary\");\r\n            return (\r\n                <button\r\n                    key={name}\r\n                    type=\"button\"\r\n                    className={clazz}\r\n                    onClick={() => onFilterSelect(name)}>\r\n                    {label}\r\n                </button>\r\n            )\r\n        });\r\n        return (\r\n            <div className=\"btn-group\">\r\n                {buttons}\r\n            </div>\r\n        )\r\n    }\r\n}","import PostListItem from \"./post-list-item\";\r\nexport default PostListItem;","import React, {Component} from \"react\";\r\n\r\nimport \"./post-list-item.css\";\r\n\r\nexport default class PostListItem extends Component {\r\n    render() {\r\n        const {label, onDelete, onToggleImportant, onToggleLiked, onToggleDone, done, like, important} = this.props;\r\n        let className = \"app-list-item d-flex justify-content-between\";\r\n\r\n        if (important) {\r\n            className += \" important\";\r\n        }\r\n\r\n        if (like) {\r\n            className += \" like\";\r\n        }\r\n\r\n        if (done){\r\n            className += \" done\";\r\n        }\r\n\r\n        return (\r\n            <div className={className}>\r\n                <span\r\n                    className=\"app-list-item-label\"\r\n                    onClick={onToggleLiked}>\r\n                        {label}\r\n                </span>\r\n                <div className=\"d-flex justify-content-center align-items-center\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className={`btn-star btn-sm ${important ? 'active' : ''}`}\r\n                        onClick={onToggleImportant}\r\n                    >\r\n                        <i className=\"fa fa-star\"></i>\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn-trash btn-sm\"\r\n                        onClick={onDelete}>\r\n                            <i className=\"fa fa-trash-o\"></i>\r\n                    </button>\r\n                        <i className=\"fa fa-heart\"></i>\r\n                        <button\r\n                        type=\"button\"\r\n                        className=\"btn-done\"\r\n                        onClick={onToggleDone}\r\n                        >\r\n                            <i className=\"fa fa-check\"></i>\r\n                        </button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import PostList from \"./post-list\";\r\nexport default PostList","import React from \"react\";\r\n\r\nimport PostListItem from \"../post-list-item\";\r\nimport \"./post-list.css\"\r\n\r\nconst PostList = ({posts, onDelete, onToggleImportant, onToggleLiked, onToggleDone}) => {\r\n\r\n    const elements = posts.map((item) => {\r\n        const {id, ...itemProps} = item;\r\n        return (\r\n            <li key={id} className=\"list-group-item\">\r\n                <PostListItem\r\n                    {...itemProps}\r\n                    onDelete={() => onDelete(id)}\r\n                    onToggleImportant={() => onToggleImportant(id)}\r\n                    onToggleLiked={() => onToggleLiked(id)}\r\n                    onToggleDone={() => onToggleDone(id)}\r\n                />\r\n            </li>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <ul className=\"app-list list-group\">\r\n            {elements}\r\n        </ul>\r\n        )\r\n}\r\n\r\nexport default PostList;","import PostAddForm from \"./post-add-form\";\r\nexport default PostAddForm;","import React, {Component} from \"react\";\r\n\r\nimport \"./post-add-form.css\";\r\n\r\nexport default class PostAddForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            text: \"\"\r\n        };\r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n// Обрабатывает изменение значения в текстовом поле\r\nonValueChange(e) {\r\n    this.setState({\r\n        text: e.target.value // Обновляет состояние с новым значением текста\r\n    });\r\n}\r\n\r\n// Обрабатывает отправку формы\r\nonSubmit(e) {\r\n    e.preventDefault(); // Предотвращает перезагрузку страницы при отправке формы\r\n    this.props.onAdd(this.state.text); // Вызывает метод добавления поста с текущим текстом\r\n    this.setState({\r\n        text: \"\" // Очищает текстовое поле после отправки\r\n    });\r\n}\r\n\r\n    render() {\r\n        return (\r\n            <form\r\n                className=\"bottom-panel d-flex\"\r\n                onSubmit={this.onSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Millest sa praegu mõtled?\"\r\n                    className=\"form-control new-post-label\"\r\n                    onChange={this.onValueChange}\r\n                    value={this.state.text}/>\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-outline-secondary\">\r\n                    Добавить\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}","import App from \"./app\";\r\n\r\nexport default App","import React, { Component } from \"react\";\r\n\r\nimport AppHeader from \"../app-header\";\r\nimport SearchPanel from \"../search-panel\";\r\nimport PostStatusFilter from \"../post-status-filter\";\r\nimport PostList from \"../post-list\";\r\nimport PostAddForm from \"../post-add-form\";\r\n\r\nimport \"./app.css\";\r\n\r\nexport default class App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // Начальные данные для постов\r\n            data: [\r\n                { label: \"Going to learn React\", important: true, like: false, done: true, id: 1 },\r\n                { label: \"That is so good\", important: false, like: false, done: false, id: 2 },\r\n                { label: \"I need a break\", important: false, like: false, done: false, id: 3 },\r\n            ],\r\n            term: \"\", // Строка для поиска\r\n            filter: \"all\" // Фильтр для отображения постов\r\n        };\r\n\r\n        // Привязка методов к контексту класса\r\n        this.deleteItem = this.deleteItem.bind(this);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.onToggleImportant = this.onToggleImportant.bind(this);\r\n        this.onToggleLiked = this.onToggleLiked.bind(this);\r\n        this.onUpdateSearch = this.onUpdateSearch.bind(this);\r\n        this.onFilterSelect = this.onFilterSelect.bind(this);\r\n        this.onToggleDone = this.onToggleDone.bind(this);\r\n        this.maxId = 4; // Уникальный ID для новых постов\r\n    }\r\n\r\n    // Метод для удаления поста по ID\r\n    deleteItem(id) {\r\n        this.setState(({ data }) => {\r\n            const index = data.findIndex(elem => elem.id === id);\r\n            const newArr = [...data.slice(0, index), ...data.slice(index + 1)];\r\n\r\n            return {\r\n                data: newArr // Возвращаем обновленный массив постов\r\n            }\r\n        });\r\n    }\r\n\r\n    // Метод для добавления нового поста\r\n    addItem(body) {\r\n        const newItem = {\r\n            label: body,\r\n            important: false,\r\n            id: this.maxId++ // Увеличиваем maxId для уникальности\r\n        };\r\n\r\n        this.setState(({ data }) => {\r\n            const newArr = [...data, newItem];\r\n            return {\r\n                data: newArr // Возвращаем новый массив постов\r\n            }\r\n        });\r\n    }\r\n\r\n    // Метод для переключения важности поста\r\n    onToggleImportant(id) {\r\n        this.setState(({ data }) => {\r\n            const index = data.findIndex(elem => elem.id === id);\r\n            const oldItem = data[index];\r\n            const newItem = { ...oldItem, important: !oldItem.important };\r\n            const newArr = [...data.slice(0, index), newItem, ...data.slice(index + 1)];\r\n            return {\r\n                data: newArr // Возвращаем обновленный массив постов\r\n            }\r\n        });\r\n    }\r\n\r\n    // Метод для переключения состояния \"нравится\"\r\n    onToggleLiked(id) {\r\n        this.setState(({ data }) => {\r\n            const index = data.findIndex(elem => elem.id === id);\r\n            const old = data[index];\r\n            const newItem = { ...old, like: !old.like };\r\n            const newArr = [...data.slice(0, index), newItem, ...data.slice(index + 1)];\r\n            return {\r\n                data: newArr // Возвращаем обновленный массив постов\r\n            }\r\n        });\r\n    }\r\n\r\n    // Метод для поиска постов по строке поиска\r\n    seachPosts(items, term) {\r\n        if (term.length === 0) {\r\n            return items; // Возвращаем все посты, если строка поиска пустая\r\n        }\r\n\r\n        return items.filter((item) => {\r\n            return item.label.indexOf(term) > -1; // Фильтруем посты по совпадению в label\r\n        });\r\n    }\r\n\r\n    // Метод для фильтрации постов по статусу (например, только \"нравится\")\r\n    filterPosts(items, filter) {\r\n        if (filter === \"like\") {\r\n            return items.filter(item => item.like); // Возвращаем только понравившиеся посты\r\n        } else {\r\n            return items; // Возвращаем все посты\r\n        }\r\n    }\r\n\r\n    // Метод для обновления строки поиска\r\n    onUpdateSearch(term) {\r\n        this.setState({ term }); // Обновляем состояние с новой строкой поиска\r\n    }\r\n\r\n    // Метод для выбора фильтра\r\n    onFilterSelect(filter) {\r\n        this.setState({ filter }); // Обновляем состояние с выбранным фильтром\r\n    }\r\n\r\n    // Метод для переключения состояния \"Готово\"\r\n    onToggleDone(id) {\r\n        this.setState(({ data }) => {\r\n            const index = data.findIndex(elem => elem.id === id);\r\n            const oldItem = data[index];\r\n            const newItem = { ...oldItem, done: !oldItem.done }; // Переключаем состояние done\r\n            const newArr = [...data.slice(0, index), newItem, ...data.slice(index + 1)];\r\n            return {\r\n                data: newArr // Возвращаем обновленный массив постов\r\n            };\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { data, term, filter } = this.state;\r\n        const liked = data.filter(item => item.like).length; // Количество постов \"нравится\"\r\n        const allPosts = data.length; // Общее количество постов\r\n        const visiblePosts = this.filterPosts(this.seachPosts(data, term), filter); // Отфильтрованные посты\r\n\r\n        return (\r\n            <div className=\"app\">\r\n                <AppHeader\r\n                    liked={liked}\r\n                    allPosts={allPosts} />\r\n                <div className=\"search-panel d-flex\">\r\n                    <SearchPanel\r\n                        onUpdateSearch={this.onUpdateSearch} />\r\n                    <PostStatusFilter\r\n                        filter={filter}\r\n                        onFilterSelect={this.onFilterSelect} />\r\n                </div>\r\n                <PostList\r\n                    posts={visiblePosts}\r\n                    onDelete={this.deleteItem}\r\n                    onToggleImportant={this.onToggleImportant}\r\n                    onToggleLiked={this.onToggleLiked}\r\n                    onToggleDone={this.onToggleDone} />\r\n                <PostAddForm\r\n                    onAdd={this.addItem} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"bootstrap/dist/css/bootstrap.css\"\r\nimport './index.css';\r\nimport App from \"./components/app\";\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}